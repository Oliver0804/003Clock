                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Mac OS X ppc)
                                      4 ;--------------------------------------------------------
                                      5 	.module PT6961
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _u8segments
                                     12 	.globl _MOSI
                                     13 	.globl _P00
                                     14 	.globl _MISO
                                     15 	.globl _P01
                                     16 	.globl _RXD_1
                                     17 	.globl _P02
                                     18 	.globl _P03
                                     19 	.globl _STADC
                                     20 	.globl _P04
                                     21 	.globl _P05
                                     22 	.globl _TXD
                                     23 	.globl _P06
                                     24 	.globl _RXD
                                     25 	.globl _P07
                                     26 	.globl _IT0
                                     27 	.globl _IE0
                                     28 	.globl _IT1
                                     29 	.globl _IE1
                                     30 	.globl _TR0
                                     31 	.globl _TF0
                                     32 	.globl _TR1
                                     33 	.globl _TF1
                                     34 	.globl _P10
                                     35 	.globl _P11
                                     36 	.globl _P12
                                     37 	.globl _SCL
                                     38 	.globl _P13
                                     39 	.globl _SDA
                                     40 	.globl _P14
                                     41 	.globl _P15
                                     42 	.globl _TXD_1
                                     43 	.globl _P16
                                     44 	.globl _P17
                                     45 	.globl _RI
                                     46 	.globl _TI
                                     47 	.globl _RB8
                                     48 	.globl _TB8
                                     49 	.globl _REN
                                     50 	.globl _SM2
                                     51 	.globl _SM1
                                     52 	.globl _FE
                                     53 	.globl _SM0
                                     54 	.globl _P20
                                     55 	.globl _EX0
                                     56 	.globl _ET0
                                     57 	.globl _EX1
                                     58 	.globl _ET1
                                     59 	.globl _ES
                                     60 	.globl _EBOD
                                     61 	.globl _EADC
                                     62 	.globl _EA
                                     63 	.globl _P30
                                     64 	.globl _PX0
                                     65 	.globl _PT0
                                     66 	.globl _PX1
                                     67 	.globl _PT1
                                     68 	.globl _PS
                                     69 	.globl _PBOD
                                     70 	.globl _PADC
                                     71 	.globl _I2CPX
                                     72 	.globl _AA
                                     73 	.globl _SI
                                     74 	.globl _STO
                                     75 	.globl _STA
                                     76 	.globl _I2CEN
                                     77 	.globl _CM_RL2
                                     78 	.globl _TR2
                                     79 	.globl _TF2
                                     80 	.globl _P
                                     81 	.globl _OV
                                     82 	.globl _RS0
                                     83 	.globl _RS1
                                     84 	.globl _F0
                                     85 	.globl _AC
                                     86 	.globl _CY
                                     87 	.globl _CLRPWM
                                     88 	.globl _PWMF
                                     89 	.globl _LOAD
                                     90 	.globl _PWMRUN
                                     91 	.globl _ADCHS0
                                     92 	.globl _ADCHS1
                                     93 	.globl _ADCHS2
                                     94 	.globl _ADCHS3
                                     95 	.globl _ETGSEL0
                                     96 	.globl _ETGSEL1
                                     97 	.globl _ADCS
                                     98 	.globl _ADCF
                                     99 	.globl _RI_1
                                    100 	.globl _TI_1
                                    101 	.globl _RB8_1
                                    102 	.globl _TB8_1
                                    103 	.globl _REN_1
                                    104 	.globl _SM2_1
                                    105 	.globl _SM1_1
                                    106 	.globl _FE_1
                                    107 	.globl _SM0_1
                                    108 	.globl _EIPH1
                                    109 	.globl _EIP1
                                    110 	.globl _PMD
                                    111 	.globl _PMEN
                                    112 	.globl _PDTCNT
                                    113 	.globl _PDTEN
                                    114 	.globl _SCON_1
                                    115 	.globl _EIPH
                                    116 	.globl _AINDIDS
                                    117 	.globl _SPDR
                                    118 	.globl _SPSR
                                    119 	.globl _SPCR2
                                    120 	.globl _SPCR
                                    121 	.globl _CAPCON4
                                    122 	.globl _CAPCON3
                                    123 	.globl _B
                                    124 	.globl _EIP
                                    125 	.globl _C2H
                                    126 	.globl _C2L
                                    127 	.globl _PIF
                                    128 	.globl _PIPEN
                                    129 	.globl _PINEN
                                    130 	.globl _PICON
                                    131 	.globl _ADCCON0
                                    132 	.globl _C1H
                                    133 	.globl _C1L
                                    134 	.globl _C0H
                                    135 	.globl _C0L
                                    136 	.globl _ADCDLY
                                    137 	.globl _ADCCON2
                                    138 	.globl _ADCCON1
                                    139 	.globl _ACC
                                    140 	.globl _PWMCON1
                                    141 	.globl _PIOCON0
                                    142 	.globl _PWM3L
                                    143 	.globl _PWM2L
                                    144 	.globl _PWM1L
                                    145 	.globl _PWM0L
                                    146 	.globl _PWMPL
                                    147 	.globl _PWMCON0
                                    148 	.globl _FBD
                                    149 	.globl _PNP
                                    150 	.globl _PWM3H
                                    151 	.globl _PWM2H
                                    152 	.globl _PWM1H
                                    153 	.globl _PWM0H
                                    154 	.globl _PWMPH
                                    155 	.globl _PSW
                                    156 	.globl _ADCMPH
                                    157 	.globl _ADCMPL
                                    158 	.globl _PWM5L
                                    159 	.globl _TH2
                                    160 	.globl _PWM4L
                                    161 	.globl _TL2
                                    162 	.globl _RCMP2H
                                    163 	.globl _RCMP2L
                                    164 	.globl _T2MOD
                                    165 	.globl _T2CON
                                    166 	.globl _TA
                                    167 	.globl _PIOCON1
                                    168 	.globl _RH3
                                    169 	.globl _PWM5H
                                    170 	.globl _RL3
                                    171 	.globl _PWM4H
                                    172 	.globl _T3CON
                                    173 	.globl _ADCRH
                                    174 	.globl _ADCRL
                                    175 	.globl _I2ADDR
                                    176 	.globl _I2CON
                                    177 	.globl _I2TOC
                                    178 	.globl _I2CLK
                                    179 	.globl _I2STAT
                                    180 	.globl _I2DAT
                                    181 	.globl _SADDR_1
                                    182 	.globl _SADEN_1
                                    183 	.globl _SADEN
                                    184 	.globl _IP
                                    185 	.globl _PWMINTC
                                    186 	.globl _IPH
                                    187 	.globl _P2S
                                    188 	.globl _P1SR
                                    189 	.globl _P1M2
                                    190 	.globl _P1S
                                    191 	.globl _P1M1
                                    192 	.globl _P0SR
                                    193 	.globl _P0M2
                                    194 	.globl _P0S
                                    195 	.globl _P0M1
                                    196 	.globl _P3
                                    197 	.globl _IAPCN
                                    198 	.globl _IAPFD
                                    199 	.globl _P3SR
                                    200 	.globl _P3M2
                                    201 	.globl _P3S
                                    202 	.globl _P3M1
                                    203 	.globl _BODCON1
                                    204 	.globl _WDCON
                                    205 	.globl _SADDR
                                    206 	.globl _IE
                                    207 	.globl _IAPAH
                                    208 	.globl _IAPAL
                                    209 	.globl _IAPUEN
                                    210 	.globl _IAPTRG
                                    211 	.globl _BODCON0
                                    212 	.globl _AUXR1
                                    213 	.globl _P2
                                    214 	.globl _CHPCON
                                    215 	.globl _EIE1
                                    216 	.globl _EIE
                                    217 	.globl _SBUF_1
                                    218 	.globl _SBUF
                                    219 	.globl _SCON
                                    220 	.globl _CKEN
                                    221 	.globl _CKSWT
                                    222 	.globl _CKDIV
                                    223 	.globl _CAPCON2
                                    224 	.globl _CAPCON1
                                    225 	.globl _CAPCON0
                                    226 	.globl _SFRS
                                    227 	.globl _P1
                                    228 	.globl _WKCON
                                    229 	.globl _CKCON
                                    230 	.globl _TH1
                                    231 	.globl _TH0
                                    232 	.globl _TL1
                                    233 	.globl _TL0
                                    234 	.globl _TMOD
                                    235 	.globl _TCON
                                    236 	.globl _PCON
                                    237 	.globl _RWK
                                    238 	.globl _RCTRIM1
                                    239 	.globl _RCTRIM0
                                    240 	.globl _DPH
                                    241 	.globl _DPL
                                    242 	.globl _SP
                                    243 	.globl _P0
                                    244 	.globl _pt6961_setNumberFade_PARM_2
                                    245 	.globl _pt6961_setNumber_PARM_2
                                    246 	.globl _pt6961_writeBit
                                    247 	.globl _pt6961_writeByte
                                    248 	.globl _pt6961_writeCommand
                                    249 	.globl _pt6961_clear
                                    250 	.globl _pt6961_setBrightness
                                    251 	.globl _pt6961_init
                                    252 	.globl _pt6961_setNumber
                                    253 	.globl _pt6961_setNumberFade
                                    254 ;--------------------------------------------------------
                                    255 ; special function registers
                                    256 ;--------------------------------------------------------
                                    257 	.area RSEG    (ABS,DATA)
      000000                        258 	.org 0x0000
                           000080   259 _P0	=	0x0080
                           000081   260 _SP	=	0x0081
                           000082   261 _DPL	=	0x0082
                           000083   262 _DPH	=	0x0083
                           000084   263 _RCTRIM0	=	0x0084
                           000085   264 _RCTRIM1	=	0x0085
                           000086   265 _RWK	=	0x0086
                           000087   266 _PCON	=	0x0087
                           000088   267 _TCON	=	0x0088
                           000089   268 _TMOD	=	0x0089
                           00008A   269 _TL0	=	0x008a
                           00008B   270 _TL1	=	0x008b
                           00008C   271 _TH0	=	0x008c
                           00008D   272 _TH1	=	0x008d
                           00008E   273 _CKCON	=	0x008e
                           00008F   274 _WKCON	=	0x008f
                           000090   275 _P1	=	0x0090
                           000091   276 _SFRS	=	0x0091
                           000092   277 _CAPCON0	=	0x0092
                           000093   278 _CAPCON1	=	0x0093
                           000094   279 _CAPCON2	=	0x0094
                           000095   280 _CKDIV	=	0x0095
                           000096   281 _CKSWT	=	0x0096
                           000097   282 _CKEN	=	0x0097
                           000098   283 _SCON	=	0x0098
                           000099   284 _SBUF	=	0x0099
                           00009A   285 _SBUF_1	=	0x009a
                           00009B   286 _EIE	=	0x009b
                           00009C   287 _EIE1	=	0x009c
                           00009F   288 _CHPCON	=	0x009f
                           0000A0   289 _P2	=	0x00a0
                           0000A2   290 _AUXR1	=	0x00a2
                           0000A3   291 _BODCON0	=	0x00a3
                           0000A4   292 _IAPTRG	=	0x00a4
                           0000A5   293 _IAPUEN	=	0x00a5
                           0000A6   294 _IAPAL	=	0x00a6
                           0000A7   295 _IAPAH	=	0x00a7
                           0000A8   296 _IE	=	0x00a8
                           0000A9   297 _SADDR	=	0x00a9
                           0000AA   298 _WDCON	=	0x00aa
                           0000AB   299 _BODCON1	=	0x00ab
                           0000AC   300 _P3M1	=	0x00ac
                           0000AC   301 _P3S	=	0x00ac
                           0000AD   302 _P3M2	=	0x00ad
                           0000AD   303 _P3SR	=	0x00ad
                           0000AE   304 _IAPFD	=	0x00ae
                           0000AF   305 _IAPCN	=	0x00af
                           0000B0   306 _P3	=	0x00b0
                           0000B1   307 _P0M1	=	0x00b1
                           0000B1   308 _P0S	=	0x00b1
                           0000B2   309 _P0M2	=	0x00b2
                           0000B2   310 _P0SR	=	0x00b2
                           0000B3   311 _P1M1	=	0x00b3
                           0000B3   312 _P1S	=	0x00b3
                           0000B4   313 _P1M2	=	0x00b4
                           0000B4   314 _P1SR	=	0x00b4
                           0000B5   315 _P2S	=	0x00b5
                           0000B7   316 _IPH	=	0x00b7
                           0000B7   317 _PWMINTC	=	0x00b7
                           0000B8   318 _IP	=	0x00b8
                           0000B9   319 _SADEN	=	0x00b9
                           0000BA   320 _SADEN_1	=	0x00ba
                           0000BB   321 _SADDR_1	=	0x00bb
                           0000BC   322 _I2DAT	=	0x00bc
                           0000BD   323 _I2STAT	=	0x00bd
                           0000BE   324 _I2CLK	=	0x00be
                           0000BF   325 _I2TOC	=	0x00bf
                           0000C0   326 _I2CON	=	0x00c0
                           0000C1   327 _I2ADDR	=	0x00c1
                           0000C2   328 _ADCRL	=	0x00c2
                           0000C3   329 _ADCRH	=	0x00c3
                           0000C4   330 _T3CON	=	0x00c4
                           0000C4   331 _PWM4H	=	0x00c4
                           0000C5   332 _RL3	=	0x00c5
                           0000C5   333 _PWM5H	=	0x00c5
                           0000C6   334 _RH3	=	0x00c6
                           0000C6   335 _PIOCON1	=	0x00c6
                           0000C7   336 _TA	=	0x00c7
                           0000C8   337 _T2CON	=	0x00c8
                           0000C9   338 _T2MOD	=	0x00c9
                           0000CA   339 _RCMP2L	=	0x00ca
                           0000CB   340 _RCMP2H	=	0x00cb
                           0000CC   341 _TL2	=	0x00cc
                           0000CC   342 _PWM4L	=	0x00cc
                           0000CD   343 _TH2	=	0x00cd
                           0000CD   344 _PWM5L	=	0x00cd
                           0000CE   345 _ADCMPL	=	0x00ce
                           0000CF   346 _ADCMPH	=	0x00cf
                           0000D0   347 _PSW	=	0x00d0
                           0000D1   348 _PWMPH	=	0x00d1
                           0000D2   349 _PWM0H	=	0x00d2
                           0000D3   350 _PWM1H	=	0x00d3
                           0000D4   351 _PWM2H	=	0x00d4
                           0000D5   352 _PWM3H	=	0x00d5
                           0000D6   353 _PNP	=	0x00d6
                           0000D7   354 _FBD	=	0x00d7
                           0000D8   355 _PWMCON0	=	0x00d8
                           0000D9   356 _PWMPL	=	0x00d9
                           0000DA   357 _PWM0L	=	0x00da
                           0000DB   358 _PWM1L	=	0x00db
                           0000DC   359 _PWM2L	=	0x00dc
                           0000DD   360 _PWM3L	=	0x00dd
                           0000DE   361 _PIOCON0	=	0x00de
                           0000DF   362 _PWMCON1	=	0x00df
                           0000E0   363 _ACC	=	0x00e0
                           0000E1   364 _ADCCON1	=	0x00e1
                           0000E2   365 _ADCCON2	=	0x00e2
                           0000E3   366 _ADCDLY	=	0x00e3
                           0000E4   367 _C0L	=	0x00e4
                           0000E5   368 _C0H	=	0x00e5
                           0000E6   369 _C1L	=	0x00e6
                           0000E7   370 _C1H	=	0x00e7
                           0000E8   371 _ADCCON0	=	0x00e8
                           0000E9   372 _PICON	=	0x00e9
                           0000EA   373 _PINEN	=	0x00ea
                           0000EB   374 _PIPEN	=	0x00eb
                           0000EC   375 _PIF	=	0x00ec
                           0000ED   376 _C2L	=	0x00ed
                           0000EE   377 _C2H	=	0x00ee
                           0000EF   378 _EIP	=	0x00ef
                           0000F0   379 _B	=	0x00f0
                           0000F1   380 _CAPCON3	=	0x00f1
                           0000F2   381 _CAPCON4	=	0x00f2
                           0000F3   382 _SPCR	=	0x00f3
                           0000F3   383 _SPCR2	=	0x00f3
                           0000F4   384 _SPSR	=	0x00f4
                           0000F5   385 _SPDR	=	0x00f5
                           0000F6   386 _AINDIDS	=	0x00f6
                           0000F7   387 _EIPH	=	0x00f7
                           0000F8   388 _SCON_1	=	0x00f8
                           0000F9   389 _PDTEN	=	0x00f9
                           0000FA   390 _PDTCNT	=	0x00fa
                           0000FB   391 _PMEN	=	0x00fb
                           0000FC   392 _PMD	=	0x00fc
                           0000FE   393 _EIP1	=	0x00fe
                           0000FF   394 _EIPH1	=	0x00ff
                                    395 ;--------------------------------------------------------
                                    396 ; special function bits
                                    397 ;--------------------------------------------------------
                                    398 	.area RSEG    (ABS,DATA)
      000000                        399 	.org 0x0000
                           0000FF   400 _SM0_1	=	0x00ff
                           0000FF   401 _FE_1	=	0x00ff
                           0000FE   402 _SM1_1	=	0x00fe
                           0000FD   403 _SM2_1	=	0x00fd
                           0000FC   404 _REN_1	=	0x00fc
                           0000FB   405 _TB8_1	=	0x00fb
                           0000FA   406 _RB8_1	=	0x00fa
                           0000F9   407 _TI_1	=	0x00f9
                           0000F8   408 _RI_1	=	0x00f8
                           0000EF   409 _ADCF	=	0x00ef
                           0000EE   410 _ADCS	=	0x00ee
                           0000ED   411 _ETGSEL1	=	0x00ed
                           0000EC   412 _ETGSEL0	=	0x00ec
                           0000EB   413 _ADCHS3	=	0x00eb
                           0000EA   414 _ADCHS2	=	0x00ea
                           0000E9   415 _ADCHS1	=	0x00e9
                           0000E8   416 _ADCHS0	=	0x00e8
                           0000DF   417 _PWMRUN	=	0x00df
                           0000DE   418 _LOAD	=	0x00de
                           0000DD   419 _PWMF	=	0x00dd
                           0000DC   420 _CLRPWM	=	0x00dc
                           0000D7   421 _CY	=	0x00d7
                           0000D6   422 _AC	=	0x00d6
                           0000D5   423 _F0	=	0x00d5
                           0000D4   424 _RS1	=	0x00d4
                           0000D3   425 _RS0	=	0x00d3
                           0000D2   426 _OV	=	0x00d2
                           0000D0   427 _P	=	0x00d0
                           0000CF   428 _TF2	=	0x00cf
                           0000CA   429 _TR2	=	0x00ca
                           0000C8   430 _CM_RL2	=	0x00c8
                           0000C6   431 _I2CEN	=	0x00c6
                           0000C5   432 _STA	=	0x00c5
                           0000C4   433 _STO	=	0x00c4
                           0000C3   434 _SI	=	0x00c3
                           0000C2   435 _AA	=	0x00c2
                           0000C0   436 _I2CPX	=	0x00c0
                           0000BE   437 _PADC	=	0x00be
                           0000BD   438 _PBOD	=	0x00bd
                           0000BC   439 _PS	=	0x00bc
                           0000BB   440 _PT1	=	0x00bb
                           0000BA   441 _PX1	=	0x00ba
                           0000B9   442 _PT0	=	0x00b9
                           0000B8   443 _PX0	=	0x00b8
                           0000B0   444 _P30	=	0x00b0
                           0000AF   445 _EA	=	0x00af
                           0000AE   446 _EADC	=	0x00ae
                           0000AD   447 _EBOD	=	0x00ad
                           0000AC   448 _ES	=	0x00ac
                           0000AB   449 _ET1	=	0x00ab
                           0000AA   450 _EX1	=	0x00aa
                           0000A9   451 _ET0	=	0x00a9
                           0000A8   452 _EX0	=	0x00a8
                           0000A0   453 _P20	=	0x00a0
                           00009F   454 _SM0	=	0x009f
                           00009F   455 _FE	=	0x009f
                           00009E   456 _SM1	=	0x009e
                           00009D   457 _SM2	=	0x009d
                           00009C   458 _REN	=	0x009c
                           00009B   459 _TB8	=	0x009b
                           00009A   460 _RB8	=	0x009a
                           000099   461 _TI	=	0x0099
                           000098   462 _RI	=	0x0098
                           000097   463 _P17	=	0x0097
                           000096   464 _P16	=	0x0096
                           000096   465 _TXD_1	=	0x0096
                           000095   466 _P15	=	0x0095
                           000094   467 _P14	=	0x0094
                           000094   468 _SDA	=	0x0094
                           000093   469 _P13	=	0x0093
                           000093   470 _SCL	=	0x0093
                           000092   471 _P12	=	0x0092
                           000091   472 _P11	=	0x0091
                           000090   473 _P10	=	0x0090
                           00008F   474 _TF1	=	0x008f
                           00008E   475 _TR1	=	0x008e
                           00008D   476 _TF0	=	0x008d
                           00008C   477 _TR0	=	0x008c
                           00008B   478 _IE1	=	0x008b
                           00008A   479 _IT1	=	0x008a
                           000089   480 _IE0	=	0x0089
                           000088   481 _IT0	=	0x0088
                           000087   482 _P07	=	0x0087
                           000087   483 _RXD	=	0x0087
                           000086   484 _P06	=	0x0086
                           000086   485 _TXD	=	0x0086
                           000085   486 _P05	=	0x0085
                           000084   487 _P04	=	0x0084
                           000084   488 _STADC	=	0x0084
                           000083   489 _P03	=	0x0083
                           000082   490 _P02	=	0x0082
                           000082   491 _RXD_1	=	0x0082
                           000081   492 _P01	=	0x0081
                           000081   493 _MISO	=	0x0081
                           000080   494 _P00	=	0x0080
                           000080   495 _MOSI	=	0x0080
                                    496 ;--------------------------------------------------------
                                    497 ; overlayable register banks
                                    498 ;--------------------------------------------------------
                                    499 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        500 	.ds 8
                                    501 ;--------------------------------------------------------
                                    502 ; internal ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area DSEG    (DATA)
      000021                        505 _pt6961_setNumber_PARM_2:
      000021                        506 	.ds 1
      000022                        507 _pt6961_setNumberFade_lastNumber_10000_208:
      000022                        508 	.ds 2
      000024                        509 _pt6961_setNumberFade_lastColon_10000_208:
      000024                        510 	.ds 1
      000025                        511 _pt6961_setNumberFade_PARM_2:
      000025                        512 	.ds 1
      000026                        513 _pt6961_setNumberFade_number_10000_207:
      000026                        514 	.ds 2
      000028                        515 _pt6961_setNumberFade_i_20000_209:
      000028                        516 	.ds 1
      000029                        517 _pt6961_setNumberFade_j_40000_211:
      000029                        518 	.ds 1
      00002A                        519 _pt6961_setNumberFade_sloc0_1_0:
      00002A                        520 	.ds 2
                                    521 ;--------------------------------------------------------
                                    522 ; overlayable items in internal ram
                                    523 ;--------------------------------------------------------
                                    524 	.area	OSEG    (OVR,DATA)
                                    525 	.area	OSEG    (OVR,DATA)
                                    526 	.area	OSEG    (OVR,DATA)
                                    527 ;--------------------------------------------------------
                                    528 ; indirectly addressable internal ram data
                                    529 ;--------------------------------------------------------
                                    530 	.area ISEG    (DATA)
                                    531 ;--------------------------------------------------------
                                    532 ; absolute internal ram data
                                    533 ;--------------------------------------------------------
                                    534 	.area IABS    (ABS,DATA)
                                    535 	.area IABS    (ABS,DATA)
                                    536 ;--------------------------------------------------------
                                    537 ; bit data
                                    538 ;--------------------------------------------------------
                                    539 	.area BSEG    (BIT)
                                    540 ;--------------------------------------------------------
                                    541 ; paged external ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area PSEG    (PAG,XDATA)
                                    544 ;--------------------------------------------------------
                                    545 ; uninitialized external ram data
                                    546 ;--------------------------------------------------------
                                    547 	.area XSEG    (XDATA)
                                    548 ;--------------------------------------------------------
                                    549 ; absolute external ram data
                                    550 ;--------------------------------------------------------
                                    551 	.area XABS    (ABS,XDATA)
                                    552 ;--------------------------------------------------------
                                    553 ; initialized external ram data
                                    554 ;--------------------------------------------------------
                                    555 	.area XISEG   (XDATA)
                                    556 	.area HOME    (CODE)
                                    557 	.area GSINIT0 (CODE)
                                    558 	.area GSINIT1 (CODE)
                                    559 	.area GSINIT2 (CODE)
                                    560 	.area GSINIT3 (CODE)
                                    561 	.area GSINIT4 (CODE)
                                    562 	.area GSINIT5 (CODE)
                                    563 	.area GSINIT  (CODE)
                                    564 	.area GSFINAL (CODE)
                                    565 	.area CSEG    (CODE)
                                    566 ;--------------------------------------------------------
                                    567 ; global & static initialisations
                                    568 ;--------------------------------------------------------
                                    569 	.area HOME    (CODE)
                                    570 	.area GSINIT  (CODE)
                                    571 	.area GSFINAL (CODE)
                                    572 	.area GSINIT  (CODE)
                                    573 ;------------------------------------------------------------
                                    574 ;Allocation info for local variables in function 'pt6961_setNumberFade'
                                    575 ;------------------------------------------------------------
                                    576 ;lastNumber                Allocated with name '_pt6961_setNumberFade_lastNumber_10000_208'
                                    577 ;lastColon                 Allocated with name '_pt6961_setNumberFade_lastColon_10000_208'
                                    578 ;u8colonOn                 Allocated with name '_pt6961_setNumberFade_PARM_2'
                                    579 ;number                    Allocated with name '_pt6961_setNumberFade_number_10000_207'
                                    580 ;i                         Allocated with name '_pt6961_setNumberFade_i_20000_209'
                                    581 ;j                         Allocated with name '_pt6961_setNumberFade_j_40000_211'
                                    582 ;__700000019               Allocated to registers 
                                    583 ;u8data                    Allocated to registers 
                                    584 ;__700000021               Allocated to registers 
                                    585 ;u8data                    Allocated to registers 
                                    586 ;__700000023               Allocated to registers 
                                    587 ;u8data                    Allocated to registers 
                                    588 ;__700000025               Allocated to registers 
                                    589 ;u8data                    Allocated to registers 
                                    590 ;__700000027               Allocated to registers 
                                    591 ;u8data                    Allocated to registers 
                                    592 ;__700000029               Allocated to registers 
                                    593 ;u8data                    Allocated to registers 
                                    594 ;__700000031               Allocated to registers 
                                    595 ;u8data                    Allocated to registers 
                                    596 ;__700000033               Allocated to registers 
                                    597 ;u8data                    Allocated to registers 
                                    598 ;sloc0                     Allocated with name '_pt6961_setNumberFade_sloc0_1_0'
                                    599 ;------------------------------------------------------------
                                    600 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:82: static int lastNumber = 0;
      0000E4 E4               [12]  601 	clr	a
      0000E5 F5 22            [12]  602 	mov	_pt6961_setNumberFade_lastNumber_10000_208,a
      0000E7 F5 23            [12]  603 	mov	(_pt6961_setNumberFade_lastNumber_10000_208 + 1),a
                                    604 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:83: static uint8_t lastColon = 0;
      0000E9 F5 24            [12]  605 	mov	_pt6961_setNumberFade_lastColon_10000_208,a
                                    606 ;--------------------------------------------------------
                                    607 ; Home
                                    608 ;--------------------------------------------------------
                                    609 	.area HOME    (CODE)
                                    610 	.area HOME    (CODE)
                                    611 ;--------------------------------------------------------
                                    612 ; code
                                    613 ;--------------------------------------------------------
                                    614 	.area CSEG    (CODE)
                                    615 ;------------------------------------------------------------
                                    616 ;Allocation info for local variables in function 'pt6961_writeBit'
                                    617 ;------------------------------------------------------------
                                    618 ;u8data                    Allocated to registers r7 
                                    619 ;------------------------------------------------------------
                                    620 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:8: inline void pt6961_writeBit(uint8_t u8data)
                                    621 ;	-----------------------------------------
                                    622 ;	 function pt6961_writeBit
                                    623 ;	-----------------------------------------
      000548                        624 _pt6961_writeBit:
                           000007   625 	ar7 = 0x07
                           000006   626 	ar6 = 0x06
                           000005   627 	ar5 = 0x05
                           000004   628 	ar4 = 0x04
                           000003   629 	ar3 = 0x03
                           000002   630 	ar2 = 0x02
                           000001   631 	ar1 = 0x01
                           000000   632 	ar0 = 0x00
                                    633 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:10: PT6961_DIN = u8data & 0x01;
      000548 E5 82            [12]  634 	mov	a,dpl
      00054A 54 01            [12]  635 	anl	a,#0x01
                                    636 ;	assignBit
      00054C 24 FF            [12]  637 	add	a,#0xff
      00054E 92 80            [24]  638 	mov	_P00,c
                                    639 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:11: PT6961_CLK = 0;
                                    640 ;	assignBit
      000550 C2 90            [12]  641 	clr	_P10
                                    642 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:12: PT6961_CLK = 1;
                                    643 ;	assignBit
      000552 D2 90            [12]  644 	setb	_P10
                                    645 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:13: }
      000554 22               [24]  646 	ret
                                    647 ;------------------------------------------------------------
                                    648 ;Allocation info for local variables in function 'pt6961_writeByte'
                                    649 ;------------------------------------------------------------
                                    650 ;u8data                    Allocated to registers 
                                    651 ;------------------------------------------------------------
                                    652 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:15: inline void pt6961_writeByte(uint8_t u8data)
                                    653 ;	-----------------------------------------
                                    654 ;	 function pt6961_writeByte
                                    655 ;	-----------------------------------------
      000555                        656 _pt6961_writeByte:
      000555 85 82 F5         [24]  657 	mov	_SPDR,dpl
                                    658 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      000558                        659 00101$:
      000558 E5 F4            [12]  660 	mov	a,_SPSR
      00055A 30 E7 FB         [24]  661 	jnb	acc.7,00101$
                                    662 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      00055D 53 F4 7F         [24]  663 	anl	_SPSR,#0x7f
                                    664 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:25: }
      000560 22               [24]  665 	ret
                                    666 ;------------------------------------------------------------
                                    667 ;Allocation info for local variables in function 'pt6961_writeCommand'
                                    668 ;------------------------------------------------------------
                                    669 ;u8cmd                     Allocated to registers r7 
                                    670 ;__200000001               Allocated to registers 
                                    671 ;u8data                    Allocated to registers 
                                    672 ;------------------------------------------------------------
                                    673 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:27: void pt6961_writeCommand(uint8_t u8cmd)
                                    674 ;	-----------------------------------------
                                    675 ;	 function pt6961_writeCommand
                                    676 ;	-----------------------------------------
      000561                        677 _pt6961_writeCommand:
      000561 AF 82            [24]  678 	mov	r7, dpl
                                    679 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:29: PT6961_STB = 1; // Initialize serial communication
                                    680 ;	assignBit
      000563 D2 91            [12]  681 	setb	_P11
                                    682 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:30: PT6961_STB = 0;
                                    683 ;	assignBit
      000565 C2 91            [12]  684 	clr	_P11
                                    685 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:18: SPDR = u8data;
      000567 8F F5            [24]  686 	mov	_SPDR,r7
                                    687 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      000569                        688 00101$:
      000569 E5 F4            [12]  689 	mov	a,_SPSR
      00056B 30 E7 FB         [24]  690 	jnb	acc.7,00101$
                                    691 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      00056E 53 F4 7F         [24]  692 	anl	_SPSR,#0x7f
                                    693 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:31: pt6961_writeByte(u8cmd);
                                    694 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:32: }
      000571 22               [24]  695 	ret
                                    696 ;------------------------------------------------------------
                                    697 ;Allocation info for local variables in function 'pt6961_clear'
                                    698 ;------------------------------------------------------------
                                    699 ;__200000003               Allocated to registers 
                                    700 ;u8data                    Allocated to registers 
                                    701 ;__200000005               Allocated to registers 
                                    702 ;u8data                    Allocated to registers 
                                    703 ;__200000007               Allocated to registers 
                                    704 ;u8data                    Allocated to registers 
                                    705 ;__200000009               Allocated to registers 
                                    706 ;u8data                    Allocated to registers 
                                    707 ;------------------------------------------------------------
                                    708 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:34: void pt6961_clear(void)
                                    709 ;	-----------------------------------------
                                    710 ;	 function pt6961_clear
                                    711 ;	-----------------------------------------
      000572                        712 _pt6961_clear:
                                    713 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:36: pt6961_writeCommand(0xC0);
      000572 75 82 C0         [24]  714 	mov	dpl, #0xc0
      000575 12 05 61         [24]  715 	lcall	_pt6961_writeCommand
                                    716 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:18: SPDR = u8data;
      000578 75 F5 00         [24]  717 	mov	_SPDR,#0x00
                                    718 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00057B                        719 00101$:
      00057B E5 F4            [12]  720 	mov	a,_SPSR
      00057D 30 E7 FB         [24]  721 	jnb	acc.7,00101$
                                    722 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000580 53 F4 7F         [24]  723 	anl	_SPSR,#0x7f
                                    724 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:38: pt6961_writeCommand(0xC2);
      000583 75 82 C2         [24]  725 	mov	dpl, #0xc2
      000586 12 05 61         [24]  726 	lcall	_pt6961_writeCommand
                                    727 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:18: SPDR = u8data;
      000589 75 F5 00         [24]  728 	mov	_SPDR,#0x00
                                    729 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00058C                        730 00105$:
      00058C E5 F4            [12]  731 	mov	a,_SPSR
      00058E 30 E7 FB         [24]  732 	jnb	acc.7,00105$
                                    733 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000591 53 F4 7F         [24]  734 	anl	_SPSR,#0x7f
                                    735 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:40: pt6961_writeCommand(0xC4);
      000594 75 82 C4         [24]  736 	mov	dpl, #0xc4
      000597 12 05 61         [24]  737 	lcall	_pt6961_writeCommand
                                    738 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:18: SPDR = u8data;
      00059A 75 F5 00         [24]  739 	mov	_SPDR,#0x00
                                    740 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00059D                        741 00109$:
      00059D E5 F4            [12]  742 	mov	a,_SPSR
      00059F 30 E7 FB         [24]  743 	jnb	acc.7,00109$
                                    744 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0005A2 53 F4 7F         [24]  745 	anl	_SPSR,#0x7f
                                    746 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:42: pt6961_writeCommand(0xC6);
      0005A5 75 82 C6         [24]  747 	mov	dpl, #0xc6
      0005A8 12 05 61         [24]  748 	lcall	_pt6961_writeCommand
                                    749 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:18: SPDR = u8data;
      0005AB 75 F5 00         [24]  750 	mov	_SPDR,#0x00
                                    751 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      0005AE                        752 00113$:
      0005AE E5 F4            [12]  753 	mov	a,_SPSR
      0005B0 30 E7 FB         [24]  754 	jnb	acc.7,00113$
                                    755 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0005B3 53 F4 7F         [24]  756 	anl	_SPSR,#0x7f
                                    757 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:43: pt6961_writeByte(0);
                                    758 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:44: }
      0005B6 22               [24]  759 	ret
                                    760 ;------------------------------------------------------------
                                    761 ;Allocation info for local variables in function 'pt6961_setBrightness'
                                    762 ;------------------------------------------------------------
                                    763 ;u8brightness              Allocated to registers r7 
                                    764 ;------------------------------------------------------------
                                    765 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:46: void pt6961_setBrightness(uint8_t u8brightness)
                                    766 ;	-----------------------------------------
                                    767 ;	 function pt6961_setBrightness
                                    768 ;	-----------------------------------------
      0005B7                        769 _pt6961_setBrightness:
                                    770 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:48: if (u8brightness > 0)
      0005B7 E5 82            [12]  771 	mov	a,dpl
      0005B9 FF               [12]  772 	mov	r7,a
      0005BA 60 0B            [24]  773 	jz	00102$
                                    774 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:49: pt6961_writeCommand(0x88 | (u8brightness - 1 & 0x07));
      0005BC 1F               [12]  775 	dec	r7
      0005BD 74 07            [12]  776 	mov	a,#0x07
      0005BF 5F               [12]  777 	anl	a,r7
      0005C0 44 88            [12]  778 	orl	a,#0x88
      0005C2 F5 82            [12]  779 	mov	dpl,a
      0005C4 02 05 61         [24]  780 	ljmp	_pt6961_writeCommand
      0005C7                        781 00102$:
                                    782 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:51: pt6961_writeCommand(0x80);
      0005C7 75 82 80         [24]  783 	mov	dpl, #0x80
                                    784 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:52: }
      0005CA 02 05 61         [24]  785 	ljmp	_pt6961_writeCommand
                                    786 ;------------------------------------------------------------
                                    787 ;Allocation info for local variables in function 'pt6961_init'
                                    788 ;------------------------------------------------------------
                                    789 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:54: void pt6961_init(void)
                                    790 ;	-----------------------------------------
                                    791 ;	 function pt6961_init
                                    792 ;	-----------------------------------------
      0005CD                        793 _pt6961_init:
                                    794 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:56: P00_PUSHPULL_MODE;
      0005CD 53 B1 FE         [24]  795 	anl	_P0M1,#0xfe
      0005D0 43 B2 01         [24]  796 	orl	_P0M2,#0x01
                                    797 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:57: P10_PUSHPULL_MODE;
      0005D3 53 B3 FE         [24]  798 	anl	_P1M1,#0xfe
      0005D6 43 B4 01         [24]  799 	orl	_P1M2,#0x01
                                    800 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:58: P11_PUSHPULL_MODE;
      0005D9 53 B3 FD         [24]  801 	anl	_P1M1,#0xfd
      0005DC 43 B4 02         [24]  802 	orl	_P1M2,#0x02
                                    803 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:61: SPSR = 0x08; // DISMODF = 1
      0005DF 75 F4 08         [24]  804 	mov	_SPSR,#0x08
                                    805 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:62: SPCR = 0x7F; // SPIEN, LSBFE, MSTR, CPOL, CPHA = 1; SPI clock rate divide by 16
      0005E2 75 F3 7F         [24]  806 	mov	_SPCR,#0x7f
                                    807 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:64: pt6961_clear();
      0005E5 12 05 72         [24]  808 	lcall	_pt6961_clear
                                    809 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:65: pt6961_setBrightness(4);
      0005E8 75 82 04         [24]  810 	mov	dpl, #0x04
                                    811 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:66: }
      0005EB 02 05 B7         [24]  812 	ljmp	_pt6961_setBrightness
                                    813 ;------------------------------------------------------------
                                    814 ;Allocation info for local variables in function 'pt6961_setNumber'
                                    815 ;------------------------------------------------------------
                                    816 ;u8colonOn                 Allocated with name '_pt6961_setNumber_PARM_2'
                                    817 ;number                    Allocated to registers r6 r7 
                                    818 ;__200000011               Allocated to registers 
                                    819 ;u8data                    Allocated to registers 
                                    820 ;__200000013               Allocated to registers 
                                    821 ;u8data                    Allocated to registers 
                                    822 ;__200000015               Allocated to registers 
                                    823 ;u8data                    Allocated to registers 
                                    824 ;__200000017               Allocated to registers 
                                    825 ;u8data                    Allocated to registers 
                                    826 ;------------------------------------------------------------
                                    827 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:68: void pt6961_setNumber(int number, uint8_t u8colonOn)
                                    828 ;	-----------------------------------------
                                    829 ;	 function pt6961_setNumber
                                    830 ;	-----------------------------------------
      0005EE                        831 _pt6961_setNumber:
      0005EE AE 82            [24]  832 	mov	r6, dpl
      0005F0 AF 83            [24]  833 	mov	r7, dph
                                    834 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:70: pt6961_writeCommand(0xC0);
      0005F2 75 82 C0         [24]  835 	mov	dpl, #0xc0
      0005F5 C0 07            [24]  836 	push	ar7
      0005F7 C0 06            [24]  837 	push	ar6
      0005F9 12 05 61         [24]  838 	lcall	_pt6961_writeCommand
      0005FC D0 06            [24]  839 	pop	ar6
      0005FE D0 07            [24]  840 	pop	ar7
                                    841 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:71: pt6961_writeByte(u8segments[number / 1000] | (u8colonOn << 7));
      000600 75 2C E8         [24]  842 	mov	__divsint_PARM_2,#0xe8
      000603 75 2D 03         [24]  843 	mov	(__divsint_PARM_2 + 1),#0x03
      000606 8E 82            [24]  844 	mov	dpl, r6
      000608 8F 83            [24]  845 	mov	dph, r7
      00060A C0 07            [24]  846 	push	ar7
      00060C C0 06            [24]  847 	push	ar6
      00060E 12 0B CC         [24]  848 	lcall	__divsint
      000611 AC 82            [24]  849 	mov	r4, dpl
      000613 AD 83            [24]  850 	mov	r5, dph
      000615 D0 06            [24]  851 	pop	ar6
      000617 D0 07            [24]  852 	pop	ar7
      000619 EC               [12]  853 	mov	a,r4
      00061A 24 08            [12]  854 	add	a, #_u8segments
      00061C F5 82            [12]  855 	mov	dpl,a
      00061E ED               [12]  856 	mov	a,r5
      00061F 34 0C            [12]  857 	addc	a, #(_u8segments >> 8)
      000621 F5 83            [12]  858 	mov	dph,a
      000623 E4               [12]  859 	clr	a
      000624 93               [24]  860 	movc	a,@a+dptr
      000625 FD               [12]  861 	mov	r5,a
      000626 E5 21            [12]  862 	mov	a,_pt6961_setNumber_PARM_2
      000628 03               [12]  863 	rr	a
      000629 54 80            [12]  864 	anl	a,#0x80
      00062B FC               [12]  865 	mov	r4,a
      00062C 4D               [12]  866 	orl	a,r5
      00062D F5 F5            [12]  867 	mov	_SPDR,a
                                    868 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00062F                        869 00101$:
      00062F E5 F4            [12]  870 	mov	a,_SPSR
      000631 30 E7 FB         [24]  871 	jnb	acc.7,00101$
                                    872 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000634 53 F4 7F         [24]  873 	anl	_SPSR,#0x7f
                                    874 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:72: pt6961_writeCommand(0xC2);
      000637 75 82 C2         [24]  875 	mov	dpl, #0xc2
      00063A C0 07            [24]  876 	push	ar7
      00063C C0 06            [24]  877 	push	ar6
      00063E C0 04            [24]  878 	push	ar4
      000640 12 05 61         [24]  879 	lcall	_pt6961_writeCommand
      000643 D0 04            [24]  880 	pop	ar4
      000645 D0 06            [24]  881 	pop	ar6
      000647 D0 07            [24]  882 	pop	ar7
                                    883 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:73: pt6961_writeByte(u8segments[number / 100 % 10] | (u8colonOn << 7));
      000649 75 2C 64         [24]  884 	mov	__divsint_PARM_2,#0x64
      00064C 75 2D 00         [24]  885 	mov	(__divsint_PARM_2 + 1),#0x00
      00064F 8E 82            [24]  886 	mov	dpl, r6
      000651 8F 83            [24]  887 	mov	dph, r7
      000653 C0 07            [24]  888 	push	ar7
      000655 C0 06            [24]  889 	push	ar6
      000657 C0 04            [24]  890 	push	ar4
      000659 12 0B CC         [24]  891 	lcall	__divsint
      00065C 75 2C 0A         [24]  892 	mov	__modsint_PARM_2,#0x0a
      00065F 75 2D 00         [24]  893 	mov	(__modsint_PARM_2 + 1),#0x00
      000662 12 0B 96         [24]  894 	lcall	__modsint
      000665 AB 82            [24]  895 	mov	r3, dpl
      000667 AD 83            [24]  896 	mov	r5, dph
      000669 D0 04            [24]  897 	pop	ar4
      00066B D0 06            [24]  898 	pop	ar6
      00066D D0 07            [24]  899 	pop	ar7
      00066F EB               [12]  900 	mov	a,r3
      000670 24 08            [12]  901 	add	a, #_u8segments
      000672 F5 82            [12]  902 	mov	dpl,a
      000674 ED               [12]  903 	mov	a,r5
      000675 34 0C            [12]  904 	addc	a, #(_u8segments >> 8)
      000677 F5 83            [12]  905 	mov	dph,a
      000679 E4               [12]  906 	clr	a
      00067A 93               [24]  907 	movc	a,@a+dptr
      00067B 4C               [12]  908 	orl	a,r4
      00067C F5 F5            [12]  909 	mov	_SPDR,a
                                    910 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00067E                        911 00105$:
      00067E E5 F4            [12]  912 	mov	a,_SPSR
      000680 30 E7 FB         [24]  913 	jnb	acc.7,00105$
                                    914 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000683 53 F4 7F         [24]  915 	anl	_SPSR,#0x7f
                                    916 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:74: pt6961_writeCommand(0xC4);
      000686 75 82 C4         [24]  917 	mov	dpl, #0xc4
      000689 C0 07            [24]  918 	push	ar7
      00068B C0 06            [24]  919 	push	ar6
      00068D 12 05 61         [24]  920 	lcall	_pt6961_writeCommand
      000690 D0 06            [24]  921 	pop	ar6
      000692 D0 07            [24]  922 	pop	ar7
                                    923 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:75: pt6961_writeByte(u8segments[number / 10 % 10]);
      000694 75 2C 0A         [24]  924 	mov	__divsint_PARM_2,#0x0a
      000697 75 2D 00         [24]  925 	mov	(__divsint_PARM_2 + 1),#0x00
      00069A 8E 82            [24]  926 	mov	dpl, r6
      00069C 8F 83            [24]  927 	mov	dph, r7
      00069E C0 07            [24]  928 	push	ar7
      0006A0 C0 06            [24]  929 	push	ar6
      0006A2 12 0B CC         [24]  930 	lcall	__divsint
      0006A5 75 2C 0A         [24]  931 	mov	__modsint_PARM_2,#0x0a
      0006A8 75 2D 00         [24]  932 	mov	(__modsint_PARM_2 + 1),#0x00
      0006AB 12 0B 96         [24]  933 	lcall	__modsint
      0006AE AC 82            [24]  934 	mov	r4, dpl
      0006B0 AD 83            [24]  935 	mov	r5, dph
      0006B2 D0 06            [24]  936 	pop	ar6
      0006B4 D0 07            [24]  937 	pop	ar7
      0006B6 EC               [12]  938 	mov	a,r4
      0006B7 24 08            [12]  939 	add	a, #_u8segments
      0006B9 F5 82            [12]  940 	mov	dpl,a
      0006BB ED               [12]  941 	mov	a,r5
      0006BC 34 0C            [12]  942 	addc	a, #(_u8segments >> 8)
      0006BE F5 83            [12]  943 	mov	dph,a
      0006C0 E4               [12]  944 	clr	a
      0006C1 93               [24]  945 	movc	a,@a+dptr
      0006C2 F5 F5            [12]  946 	mov	_SPDR,a
                                    947 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      0006C4                        948 00109$:
      0006C4 E5 F4            [12]  949 	mov	a,_SPSR
      0006C6 30 E7 FB         [24]  950 	jnb	acc.7,00109$
                                    951 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0006C9 53 F4 7F         [24]  952 	anl	_SPSR,#0x7f
                                    953 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:76: pt6961_writeCommand(0xC6);
      0006CC 75 82 C6         [24]  954 	mov	dpl, #0xc6
      0006CF C0 07            [24]  955 	push	ar7
      0006D1 C0 06            [24]  956 	push	ar6
      0006D3 12 05 61         [24]  957 	lcall	_pt6961_writeCommand
      0006D6 D0 06            [24]  958 	pop	ar6
      0006D8 D0 07            [24]  959 	pop	ar7
                                    960 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:77: pt6961_writeByte(u8segments[number % 10]);
      0006DA 75 2C 0A         [24]  961 	mov	__modsint_PARM_2,#0x0a
      0006DD 75 2D 00         [24]  962 	mov	(__modsint_PARM_2 + 1),#0x00
      0006E0 8E 82            [24]  963 	mov	dpl, r6
      0006E2 8F 83            [24]  964 	mov	dph, r7
      0006E4 12 0B 96         [24]  965 	lcall	__modsint
      0006E7 AE 82            [24]  966 	mov	r6, dpl
      0006E9 AF 83            [24]  967 	mov	r7, dph
      0006EB EE               [12]  968 	mov	a,r6
      0006EC 24 08            [12]  969 	add	a, #_u8segments
      0006EE F5 82            [12]  970 	mov	dpl,a
      0006F0 EF               [12]  971 	mov	a,r7
      0006F1 34 0C            [12]  972 	addc	a, #(_u8segments >> 8)
      0006F3 F5 83            [12]  973 	mov	dph,a
      0006F5 E4               [12]  974 	clr	a
      0006F6 93               [24]  975 	movc	a,@a+dptr
      0006F7 F5 F5            [12]  976 	mov	_SPDR,a
                                    977 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      0006F9                        978 00113$:
      0006F9 E5 F4            [12]  979 	mov	a,_SPSR
      0006FB 30 E7 FB         [24]  980 	jnb	acc.7,00113$
                                    981 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0006FE 53 F4 7F         [24]  982 	anl	_SPSR,#0x7f
                                    983 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:77: pt6961_writeByte(u8segments[number % 10]);
                                    984 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:78: }
      000701 22               [24]  985 	ret
                                    986 ;------------------------------------------------------------
                                    987 ;Allocation info for local variables in function 'pt6961_setNumberFade'
                                    988 ;------------------------------------------------------------
                                    989 ;lastNumber                Allocated with name '_pt6961_setNumberFade_lastNumber_10000_208'
                                    990 ;lastColon                 Allocated with name '_pt6961_setNumberFade_lastColon_10000_208'
                                    991 ;u8colonOn                 Allocated with name '_pt6961_setNumberFade_PARM_2'
                                    992 ;number                    Allocated with name '_pt6961_setNumberFade_number_10000_207'
                                    993 ;i                         Allocated with name '_pt6961_setNumberFade_i_20000_209'
                                    994 ;j                         Allocated with name '_pt6961_setNumberFade_j_40000_211'
                                    995 ;__700000019               Allocated to registers 
                                    996 ;u8data                    Allocated to registers 
                                    997 ;__700000021               Allocated to registers 
                                    998 ;u8data                    Allocated to registers 
                                    999 ;__700000023               Allocated to registers 
                                   1000 ;u8data                    Allocated to registers 
                                   1001 ;__700000025               Allocated to registers 
                                   1002 ;u8data                    Allocated to registers 
                                   1003 ;__700000027               Allocated to registers 
                                   1004 ;u8data                    Allocated to registers 
                                   1005 ;__700000029               Allocated to registers 
                                   1006 ;u8data                    Allocated to registers 
                                   1007 ;__700000031               Allocated to registers 
                                   1008 ;u8data                    Allocated to registers 
                                   1009 ;__700000033               Allocated to registers 
                                   1010 ;u8data                    Allocated to registers 
                                   1011 ;sloc0                     Allocated with name '_pt6961_setNumberFade_sloc0_1_0'
                                   1012 ;------------------------------------------------------------
                                   1013 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:80: void pt6961_setNumberFade(int number, uint8_t u8colonOn)
                                   1014 ;	-----------------------------------------
                                   1015 ;	 function pt6961_setNumberFade
                                   1016 ;	-----------------------------------------
      000702                       1017 _pt6961_setNumberFade:
                                   1018 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:85: for(uint8_t i=0; i<20; i++)
      000702 85 82 26         [24] 1019 	mov	_pt6961_setNumberFade_number_10000_207,dpl
      000705 85 83 27         [24] 1020 	mov	(_pt6961_setNumberFade_number_10000_207 + 1),dph
      000708 75 2C E8         [24] 1021 	mov	__divsint_PARM_2,#0xe8
      00070B 75 2D 03         [24] 1022 	mov	(__divsint_PARM_2 + 1),#0x03
      00070E 12 0B CC         [24] 1023 	lcall	__divsint
      000711 AC 82            [24] 1024 	mov	r4, dpl
      000713 AD 83            [24] 1025 	mov	r5, dph
      000715 EC               [12] 1026 	mov	a,r4
      000716 24 08            [12] 1027 	add	a, #_u8segments
      000718 FC               [12] 1028 	mov	r4,a
      000719 ED               [12] 1029 	mov	a,r5
      00071A 34 0C            [12] 1030 	addc	a, #(_u8segments >> 8)
      00071C FD               [12] 1031 	mov	r5,a
      00071D 75 2C 64         [24] 1032 	mov	__divsint_PARM_2,#0x64
      000720 75 2D 00         [24] 1033 	mov	(__divsint_PARM_2 + 1),#0x00
      000723 85 26 82         [24] 1034 	mov	dpl, _pt6961_setNumberFade_number_10000_207
      000726 85 27 83         [24] 1035 	mov	dph, (_pt6961_setNumberFade_number_10000_207 + 1)
      000729 C0 05            [24] 1036 	push	ar5
      00072B C0 04            [24] 1037 	push	ar4
      00072D 12 0B CC         [24] 1038 	lcall	__divsint
      000730 75 2C 0A         [24] 1039 	mov	__modsint_PARM_2,#0x0a
      000733 75 2D 00         [24] 1040 	mov	(__modsint_PARM_2 + 1),#0x00
      000736 12 0B 96         [24] 1041 	lcall	__modsint
      000739 AA 82            [24] 1042 	mov	r2, dpl
      00073B AB 83            [24] 1043 	mov	r3, dph
      00073D EA               [12] 1044 	mov	a,r2
      00073E 24 08            [12] 1045 	add	a, #_u8segments
      000740 FA               [12] 1046 	mov	r2,a
      000741 EB               [12] 1047 	mov	a,r3
      000742 34 0C            [12] 1048 	addc	a, #(_u8segments >> 8)
      000744 FB               [12] 1049 	mov	r3,a
      000745 75 2C 0A         [24] 1050 	mov	__divsint_PARM_2,#0x0a
      000748 75 2D 00         [24] 1051 	mov	(__divsint_PARM_2 + 1),#0x00
      00074B 85 26 82         [24] 1052 	mov	dpl, _pt6961_setNumberFade_number_10000_207
      00074E 85 27 83         [24] 1053 	mov	dph, (_pt6961_setNumberFade_number_10000_207 + 1)
      000751 C0 03            [24] 1054 	push	ar3
      000753 C0 02            [24] 1055 	push	ar2
      000755 12 0B CC         [24] 1056 	lcall	__divsint
      000758 75 2C 0A         [24] 1057 	mov	__modsint_PARM_2,#0x0a
      00075B 75 2D 00         [24] 1058 	mov	(__modsint_PARM_2 + 1),#0x00
      00075E 12 0B 96         [24] 1059 	lcall	__modsint
      000761 A8 82            [24] 1060 	mov	r0, dpl
      000763 A9 83            [24] 1061 	mov	r1, dph
      000765 E8               [12] 1062 	mov	a,r0
      000766 24 08            [12] 1063 	add	a, #_u8segments
      000768 F8               [12] 1064 	mov	r0,a
      000769 E9               [12] 1065 	mov	a,r1
      00076A 34 0C            [12] 1066 	addc	a, #(_u8segments >> 8)
      00076C F9               [12] 1067 	mov	r1,a
      00076D 75 2C 0A         [24] 1068 	mov	__modsint_PARM_2,#0x0a
      000770 75 2D 00         [24] 1069 	mov	(__modsint_PARM_2 + 1),#0x00
      000773 85 26 82         [24] 1070 	mov	dpl, _pt6961_setNumberFade_number_10000_207
      000776 85 27 83         [24] 1071 	mov	dph, (_pt6961_setNumberFade_number_10000_207 + 1)
      000779 C0 01            [24] 1072 	push	ar1
      00077B C0 00            [24] 1073 	push	ar0
      00077D 12 0B 96         [24] 1074 	lcall	__modsint
      000780 AE 82            [24] 1075 	mov	r6, dpl
      000782 AF 83            [24] 1076 	mov	r7, dph
      000784 D0 00            [24] 1077 	pop	ar0
      000786 D0 01            [24] 1078 	pop	ar1
      000788 D0 02            [24] 1079 	pop	ar2
      00078A D0 03            [24] 1080 	pop	ar3
      00078C D0 04            [24] 1081 	pop	ar4
      00078E D0 05            [24] 1082 	pop	ar5
      000790 EE               [12] 1083 	mov	a,r6
      000791 24 08            [12] 1084 	add	a, #_u8segments
      000793 F5 2A            [12] 1085 	mov	_pt6961_setNumberFade_sloc0_1_0,a
      000795 EF               [12] 1086 	mov	a,r7
      000796 34 0C            [12] 1087 	addc	a, #(_u8segments >> 8)
      000798 F5 2B            [12] 1088 	mov	(_pt6961_setNumberFade_sloc0_1_0 + 1),a
      00079A 75 28 00         [24] 1089 	mov	_pt6961_setNumberFade_i_20000_209,#0x00
      00079D                       1090 00142$:
      00079D 74 EC            [12] 1091 	mov	a,#0x100 - 0x14
      00079F 25 28            [12] 1092 	add	a,_pt6961_setNumberFade_i_20000_209
      0007A1 50 03            [24] 1093 	jnc	00274$
      0007A3 02 09 CC         [24] 1094 	ljmp	00105$
      0007A6                       1095 00274$:
                                   1096 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:87: for(uint8_t j=0; j<20; j++)
      0007A6 75 29 00         [24] 1097 	mov	_pt6961_setNumberFade_j_40000_211,#0x00
      0007A9                       1098 00139$:
      0007A9 74 EC            [12] 1099 	mov	a,#0x100 - 0x14
      0007AB 25 29            [12] 1100 	add	a,_pt6961_setNumberFade_j_40000_211
      0007AD 50 03            [24] 1101 	jnc	00275$
      0007AF 02 09 C7         [24] 1102 	ljmp	00143$
      0007B2                       1103 00275$:
                                   1104 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:89: if (i>=j)
      0007B2 C3               [12] 1105 	clr	c
      0007B3 E5 28            [12] 1106 	mov	a,_pt6961_setNumberFade_i_20000_209
      0007B5 95 29            [12] 1107 	subb	a,_pt6961_setNumberFade_j_40000_211
      0007B7 50 03            [24] 1108 	jnc	00276$
      0007B9 02 08 86         [24] 1109 	ljmp	00102$
      0007BC                       1110 00276$:
                                   1111 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:91: pt6961_writeCommand(0xC0);
      0007BC 75 82 C0         [24] 1112 	mov	dpl, #0xc0
      0007BF C0 05            [24] 1113 	push	ar5
      0007C1 C0 04            [24] 1114 	push	ar4
      0007C3 C0 03            [24] 1115 	push	ar3
      0007C5 C0 02            [24] 1116 	push	ar2
      0007C7 C0 01            [24] 1117 	push	ar1
      0007C9 C0 00            [24] 1118 	push	ar0
      0007CB 12 05 61         [24] 1119 	lcall	_pt6961_writeCommand
      0007CE D0 00            [24] 1120 	pop	ar0
      0007D0 D0 01            [24] 1121 	pop	ar1
      0007D2 D0 02            [24] 1122 	pop	ar2
      0007D4 D0 03            [24] 1123 	pop	ar3
      0007D6 D0 04            [24] 1124 	pop	ar4
      0007D8 D0 05            [24] 1125 	pop	ar5
                                   1126 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:92: pt6961_writeByte(u8segments[number / 1000] | (u8colonOn << 7));
      0007DA 8C 82            [24] 1127 	mov	dpl,r4
      0007DC 8D 83            [24] 1128 	mov	dph,r5
      0007DE E4               [12] 1129 	clr	a
      0007DF 93               [24] 1130 	movc	a,@a+dptr
      0007E0 FF               [12] 1131 	mov	r7,a
      0007E1 E5 25            [12] 1132 	mov	a,_pt6961_setNumberFade_PARM_2
      0007E3 03               [12] 1133 	rr	a
      0007E4 54 80            [12] 1134 	anl	a,#0x80
      0007E6 FE               [12] 1135 	mov	r6,a
      0007E7 4F               [12] 1136 	orl	a,r7
      0007E8 F5 F5            [12] 1137 	mov	_SPDR,a
                                   1138 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      0007EA                       1139 00106$:
      0007EA E5 F4            [12] 1140 	mov	a,_SPSR
      0007EC 30 E7 FB         [24] 1141 	jnb	acc.7,00106$
                                   1142 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0007EF 53 F4 7F         [24] 1143 	anl	_SPSR,#0x7f
                                   1144 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:93: pt6961_writeCommand(0xC2);
      0007F2 75 82 C2         [24] 1145 	mov	dpl, #0xc2
      0007F5 C0 06            [24] 1146 	push	ar6
      0007F7 C0 05            [24] 1147 	push	ar5
      0007F9 C0 04            [24] 1148 	push	ar4
      0007FB C0 03            [24] 1149 	push	ar3
      0007FD C0 02            [24] 1150 	push	ar2
      0007FF C0 01            [24] 1151 	push	ar1
      000801 C0 00            [24] 1152 	push	ar0
      000803 12 05 61         [24] 1153 	lcall	_pt6961_writeCommand
      000806 D0 00            [24] 1154 	pop	ar0
      000808 D0 01            [24] 1155 	pop	ar1
      00080A D0 02            [24] 1156 	pop	ar2
      00080C D0 03            [24] 1157 	pop	ar3
      00080E D0 04            [24] 1158 	pop	ar4
      000810 D0 05            [24] 1159 	pop	ar5
      000812 D0 06            [24] 1160 	pop	ar6
                                   1161 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:94: pt6961_writeByte(u8segments[number / 100 % 10] | (u8colonOn << 7));
      000814 8A 82            [24] 1162 	mov	dpl,r2
      000816 8B 83            [24] 1163 	mov	dph,r3
      000818 E4               [12] 1164 	clr	a
      000819 93               [24] 1165 	movc	a,@a+dptr
      00081A 4E               [12] 1166 	orl	a,r6
      00081B F5 F5            [12] 1167 	mov	_SPDR,a
                                   1168 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00081D                       1169 00110$:
      00081D E5 F4            [12] 1170 	mov	a,_SPSR
      00081F 30 E7 FB         [24] 1171 	jnb	acc.7,00110$
                                   1172 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000822 53 F4 7F         [24] 1173 	anl	_SPSR,#0x7f
                                   1174 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:95: pt6961_writeCommand(0xC4);
      000825 75 82 C4         [24] 1175 	mov	dpl, #0xc4
      000828 C0 05            [24] 1176 	push	ar5
      00082A C0 04            [24] 1177 	push	ar4
      00082C C0 03            [24] 1178 	push	ar3
      00082E C0 02            [24] 1179 	push	ar2
      000830 C0 01            [24] 1180 	push	ar1
      000832 C0 00            [24] 1181 	push	ar0
      000834 12 05 61         [24] 1182 	lcall	_pt6961_writeCommand
      000837 D0 00            [24] 1183 	pop	ar0
      000839 D0 01            [24] 1184 	pop	ar1
      00083B D0 02            [24] 1185 	pop	ar2
      00083D D0 03            [24] 1186 	pop	ar3
      00083F D0 04            [24] 1187 	pop	ar4
      000841 D0 05            [24] 1188 	pop	ar5
                                   1189 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:96: pt6961_writeByte(u8segments[number / 10 % 10]);
      000843 88 82            [24] 1190 	mov	dpl,r0
      000845 89 83            [24] 1191 	mov	dph,r1
      000847 E4               [12] 1192 	clr	a
      000848 93               [24] 1193 	movc	a,@a+dptr
      000849 F5 F5            [12] 1194 	mov	_SPDR,a
                                   1195 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00084B                       1196 00114$:
      00084B E5 F4            [12] 1197 	mov	a,_SPSR
      00084D 30 E7 FB         [24] 1198 	jnb	acc.7,00114$
                                   1199 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000850 53 F4 7F         [24] 1200 	anl	_SPSR,#0x7f
                                   1201 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:97: pt6961_writeCommand(0xC6);
      000853 75 82 C6         [24] 1202 	mov	dpl, #0xc6
      000856 C0 05            [24] 1203 	push	ar5
      000858 C0 04            [24] 1204 	push	ar4
      00085A C0 03            [24] 1205 	push	ar3
      00085C C0 02            [24] 1206 	push	ar2
      00085E C0 01            [24] 1207 	push	ar1
      000860 C0 00            [24] 1208 	push	ar0
      000862 12 05 61         [24] 1209 	lcall	_pt6961_writeCommand
      000865 D0 00            [24] 1210 	pop	ar0
      000867 D0 01            [24] 1211 	pop	ar1
      000869 D0 02            [24] 1212 	pop	ar2
      00086B D0 03            [24] 1213 	pop	ar3
      00086D D0 04            [24] 1214 	pop	ar4
      00086F D0 05            [24] 1215 	pop	ar5
                                   1216 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:98: pt6961_writeByte(u8segments[number % 10]);
      000871 85 2A 82         [24] 1217 	mov	dpl,_pt6961_setNumberFade_sloc0_1_0
      000874 85 2B 83         [24] 1218 	mov	dph,(_pt6961_setNumberFade_sloc0_1_0 + 1)
      000877 E4               [12] 1219 	clr	a
      000878 93               [24] 1220 	movc	a,@a+dptr
      000879 F5 F5            [12] 1221 	mov	_SPDR,a
                                   1222 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      00087B                       1223 00118$:
      00087B E5 F4            [12] 1224 	mov	a,_SPSR
      00087D 30 E7 FB         [24] 1225 	jnb	acc.7,00118$
                                   1226 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000880 53 F4 7F         [24] 1227 	anl	_SPSR,#0x7f
                                   1228 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:98: pt6961_writeByte(u8segments[number % 10]);
      000883 02 09 C2         [24] 1229 	ljmp	00140$
      000886                       1230 00102$:
                                   1231 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:102: pt6961_writeCommand(0xC0);
      000886 75 82 C0         [24] 1232 	mov	dpl, #0xc0
      000889 C0 05            [24] 1233 	push	ar5
      00088B C0 04            [24] 1234 	push	ar4
      00088D C0 03            [24] 1235 	push	ar3
      00088F C0 02            [24] 1236 	push	ar2
      000891 C0 01            [24] 1237 	push	ar1
      000893 C0 00            [24] 1238 	push	ar0
      000895 12 05 61         [24] 1239 	lcall	_pt6961_writeCommand
                                   1240 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:103: pt6961_writeByte(u8segments[lastNumber / 1000] | (lastColon << 7));
      000898 75 2C E8         [24] 1241 	mov	__divsint_PARM_2,#0xe8
      00089B 75 2D 03         [24] 1242 	mov	(__divsint_PARM_2 + 1),#0x03
      00089E 85 22 82         [24] 1243 	mov	dpl, _pt6961_setNumberFade_lastNumber_10000_208
      0008A1 85 23 83         [24] 1244 	mov	dph, (_pt6961_setNumberFade_lastNumber_10000_208 + 1)
      0008A4 12 0B CC         [24] 1245 	lcall	__divsint
      0008A7 AE 82            [24] 1246 	mov	r6, dpl
      0008A9 AF 83            [24] 1247 	mov	r7, dph
      0008AB D0 00            [24] 1248 	pop	ar0
      0008AD D0 01            [24] 1249 	pop	ar1
      0008AF D0 02            [24] 1250 	pop	ar2
      0008B1 D0 03            [24] 1251 	pop	ar3
      0008B3 D0 04            [24] 1252 	pop	ar4
      0008B5 D0 05            [24] 1253 	pop	ar5
      0008B7 EE               [12] 1254 	mov	a,r6
      0008B8 24 08            [12] 1255 	add	a, #_u8segments
      0008BA F5 82            [12] 1256 	mov	dpl,a
      0008BC EF               [12] 1257 	mov	a,r7
      0008BD 34 0C            [12] 1258 	addc	a, #(_u8segments >> 8)
      0008BF F5 83            [12] 1259 	mov	dph,a
      0008C1 E4               [12] 1260 	clr	a
      0008C2 93               [24] 1261 	movc	a,@a+dptr
      0008C3 FF               [12] 1262 	mov	r7,a
      0008C4 E5 24            [12] 1263 	mov	a,_pt6961_setNumberFade_lastColon_10000_208
      0008C6 03               [12] 1264 	rr	a
      0008C7 54 80            [12] 1265 	anl	a,#0x80
      0008C9 4F               [12] 1266 	orl	a,r7
      0008CA F5 F5            [12] 1267 	mov	_SPDR,a
                                   1268 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      0008CC                       1269 00122$:
      0008CC E5 F4            [12] 1270 	mov	a,_SPSR
      0008CE 30 E7 FB         [24] 1271 	jnb	acc.7,00122$
                                   1272 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0008D1 53 F4 7F         [24] 1273 	anl	_SPSR,#0x7f
                                   1274 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:104: pt6961_writeCommand(0xC2);
      0008D4 75 82 C2         [24] 1275 	mov	dpl, #0xc2
      0008D7 C0 05            [24] 1276 	push	ar5
      0008D9 C0 04            [24] 1277 	push	ar4
      0008DB C0 03            [24] 1278 	push	ar3
      0008DD C0 02            [24] 1279 	push	ar2
      0008DF C0 01            [24] 1280 	push	ar1
      0008E1 C0 00            [24] 1281 	push	ar0
      0008E3 12 05 61         [24] 1282 	lcall	_pt6961_writeCommand
                                   1283 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:105: pt6961_writeByte(u8segments[lastNumber / 100 % 10] | (lastColon << 7));
      0008E6 75 2C 64         [24] 1284 	mov	__divsint_PARM_2,#0x64
      0008E9 75 2D 00         [24] 1285 	mov	(__divsint_PARM_2 + 1),#0x00
      0008EC 85 22 82         [24] 1286 	mov	dpl, _pt6961_setNumberFade_lastNumber_10000_208
      0008EF 85 23 83         [24] 1287 	mov	dph, (_pt6961_setNumberFade_lastNumber_10000_208 + 1)
      0008F2 12 0B CC         [24] 1288 	lcall	__divsint
      0008F5 75 2C 0A         [24] 1289 	mov	__modsint_PARM_2,#0x0a
      0008F8 75 2D 00         [24] 1290 	mov	(__modsint_PARM_2 + 1),#0x00
      0008FB 12 0B 96         [24] 1291 	lcall	__modsint
      0008FE AE 82            [24] 1292 	mov	r6, dpl
      000900 AF 83            [24] 1293 	mov	r7, dph
      000902 D0 00            [24] 1294 	pop	ar0
      000904 D0 01            [24] 1295 	pop	ar1
      000906 D0 02            [24] 1296 	pop	ar2
      000908 D0 03            [24] 1297 	pop	ar3
      00090A D0 04            [24] 1298 	pop	ar4
      00090C D0 05            [24] 1299 	pop	ar5
      00090E EE               [12] 1300 	mov	a,r6
      00090F 24 08            [12] 1301 	add	a, #_u8segments
      000911 F5 82            [12] 1302 	mov	dpl,a
      000913 EF               [12] 1303 	mov	a,r7
      000914 34 0C            [12] 1304 	addc	a, #(_u8segments >> 8)
      000916 F5 83            [12] 1305 	mov	dph,a
      000918 E4               [12] 1306 	clr	a
      000919 93               [24] 1307 	movc	a,@a+dptr
      00091A FF               [12] 1308 	mov	r7,a
      00091B E5 24            [12] 1309 	mov	a,_pt6961_setNumberFade_lastColon_10000_208
      00091D 03               [12] 1310 	rr	a
      00091E 54 80            [12] 1311 	anl	a,#0x80
      000920 4F               [12] 1312 	orl	a,r7
      000921 F5 F5            [12] 1313 	mov	_SPDR,a
                                   1314 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      000923                       1315 00126$:
      000923 E5 F4            [12] 1316 	mov	a,_SPSR
      000925 30 E7 FB         [24] 1317 	jnb	acc.7,00126$
                                   1318 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000928 53 F4 7F         [24] 1319 	anl	_SPSR,#0x7f
                                   1320 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:106: pt6961_writeCommand(0xC4);
      00092B 75 82 C4         [24] 1321 	mov	dpl, #0xc4
      00092E C0 05            [24] 1322 	push	ar5
      000930 C0 04            [24] 1323 	push	ar4
      000932 C0 03            [24] 1324 	push	ar3
      000934 C0 02            [24] 1325 	push	ar2
      000936 C0 01            [24] 1326 	push	ar1
      000938 C0 00            [24] 1327 	push	ar0
      00093A 12 05 61         [24] 1328 	lcall	_pt6961_writeCommand
                                   1329 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:107: pt6961_writeByte(u8segments[lastNumber / 10 % 10]);
      00093D 75 2C 0A         [24] 1330 	mov	__divsint_PARM_2,#0x0a
      000940 75 2D 00         [24] 1331 	mov	(__divsint_PARM_2 + 1),#0x00
      000943 85 22 82         [24] 1332 	mov	dpl, _pt6961_setNumberFade_lastNumber_10000_208
      000946 85 23 83         [24] 1333 	mov	dph, (_pt6961_setNumberFade_lastNumber_10000_208 + 1)
      000949 12 0B CC         [24] 1334 	lcall	__divsint
      00094C 75 2C 0A         [24] 1335 	mov	__modsint_PARM_2,#0x0a
      00094F 75 2D 00         [24] 1336 	mov	(__modsint_PARM_2 + 1),#0x00
      000952 12 0B 96         [24] 1337 	lcall	__modsint
      000955 AE 82            [24] 1338 	mov	r6, dpl
      000957 AF 83            [24] 1339 	mov	r7, dph
      000959 D0 00            [24] 1340 	pop	ar0
      00095B D0 01            [24] 1341 	pop	ar1
      00095D D0 02            [24] 1342 	pop	ar2
      00095F D0 03            [24] 1343 	pop	ar3
      000961 D0 04            [24] 1344 	pop	ar4
      000963 D0 05            [24] 1345 	pop	ar5
      000965 EE               [12] 1346 	mov	a,r6
      000966 24 08            [12] 1347 	add	a, #_u8segments
      000968 F5 82            [12] 1348 	mov	dpl,a
      00096A EF               [12] 1349 	mov	a,r7
      00096B 34 0C            [12] 1350 	addc	a, #(_u8segments >> 8)
      00096D F5 83            [12] 1351 	mov	dph,a
      00096F E4               [12] 1352 	clr	a
      000970 93               [24] 1353 	movc	a,@a+dptr
      000971 F5 F5            [12] 1354 	mov	_SPDR,a
                                   1355 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      000973                       1356 00130$:
      000973 E5 F4            [12] 1357 	mov	a,_SPSR
      000975 30 E7 FB         [24] 1358 	jnb	acc.7,00130$
                                   1359 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      000978 53 F4 7F         [24] 1360 	anl	_SPSR,#0x7f
                                   1361 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:108: pt6961_writeCommand(0xC6);
      00097B 75 82 C6         [24] 1362 	mov	dpl, #0xc6
      00097E C0 05            [24] 1363 	push	ar5
      000980 C0 04            [24] 1364 	push	ar4
      000982 C0 03            [24] 1365 	push	ar3
      000984 C0 02            [24] 1366 	push	ar2
      000986 C0 01            [24] 1367 	push	ar1
      000988 C0 00            [24] 1368 	push	ar0
      00098A 12 05 61         [24] 1369 	lcall	_pt6961_writeCommand
                                   1370 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:109: pt6961_writeByte(u8segments[lastNumber % 10]);
      00098D 75 2C 0A         [24] 1371 	mov	__modsint_PARM_2,#0x0a
      000990 75 2D 00         [24] 1372 	mov	(__modsint_PARM_2 + 1),#0x00
      000993 85 22 82         [24] 1373 	mov	dpl, _pt6961_setNumberFade_lastNumber_10000_208
      000996 85 23 83         [24] 1374 	mov	dph, (_pt6961_setNumberFade_lastNumber_10000_208 + 1)
      000999 12 0B 96         [24] 1375 	lcall	__modsint
      00099C AE 82            [24] 1376 	mov	r6, dpl
      00099E AF 83            [24] 1377 	mov	r7, dph
      0009A0 D0 00            [24] 1378 	pop	ar0
      0009A2 D0 01            [24] 1379 	pop	ar1
      0009A4 D0 02            [24] 1380 	pop	ar2
      0009A6 D0 03            [24] 1381 	pop	ar3
      0009A8 D0 04            [24] 1382 	pop	ar4
      0009AA D0 05            [24] 1383 	pop	ar5
      0009AC EE               [12] 1384 	mov	a,r6
      0009AD 24 08            [12] 1385 	add	a, #_u8segments
      0009AF F5 82            [12] 1386 	mov	dpl,a
      0009B1 EF               [12] 1387 	mov	a,r7
      0009B2 34 0C            [12] 1388 	addc	a, #(_u8segments >> 8)
      0009B4 F5 83            [12] 1389 	mov	dph,a
      0009B6 E4               [12] 1390 	clr	a
      0009B7 93               [24] 1391 	movc	a,@a+dptr
      0009B8 F5 F5            [12] 1392 	mov	_SPDR,a
                                   1393 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:19: while (!(SPSR & 0x80)); // Wait until transfer is complete
      0009BA                       1394 00134$:
      0009BA E5 F4            [12] 1395 	mov	a,_SPSR
      0009BC 30 E7 FB         [24] 1396 	jnb	acc.7,00134$
                                   1397 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:20: SPSR &= 0x7F; // Clear SPIF
      0009BF 53 F4 7F         [24] 1398 	anl	_SPSR,#0x7f
                                   1399 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:109: pt6961_writeByte(u8segments[lastNumber % 10]);
      0009C2                       1400 00140$:
                                   1401 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:87: for(uint8_t j=0; j<20; j++)
      0009C2 05 29            [12] 1402 	inc	_pt6961_setNumberFade_j_40000_211
      0009C4 02 07 A9         [24] 1403 	ljmp	00139$
      0009C7                       1404 00143$:
                                   1405 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:85: for(uint8_t i=0; i<20; i++)
      0009C7 05 28            [12] 1406 	inc	_pt6961_setNumberFade_i_20000_209
      0009C9 02 07 9D         [24] 1407 	ljmp	00142$
      0009CC                       1408 00105$:
                                   1409 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:114: lastNumber = number;
      0009CC 85 26 22         [24] 1410 	mov	_pt6961_setNumberFade_lastNumber_10000_208,_pt6961_setNumberFade_number_10000_207
      0009CF 85 27 23         [24] 1411 	mov	(_pt6961_setNumberFade_lastNumber_10000_208 + 1),(_pt6961_setNumberFade_number_10000_207 + 1)
                                   1412 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:115: lastColon = u8colonOn;
      0009D2 85 25 24         [24] 1413 	mov	_pt6961_setNumberFade_lastColon_10000_208,_pt6961_setNumberFade_PARM_2
                                   1414 ;	/Users/oliver/code/c/Clock_n76e003/firmware/003Clock/PT6961.c:116: }
      0009D5 22               [24] 1415 	ret
                                   1416 	.area CSEG    (CODE)
                                   1417 	.area CONST   (CODE)
      000C08                       1418 _u8segments:
      000C08 3F                    1419 	.db #0x3f	; 63
      000C09 06                    1420 	.db #0x06	; 6
      000C0A 5B                    1421 	.db #0x5b	; 91
      000C0B 4F                    1422 	.db #0x4f	; 79	'O'
      000C0C 66                    1423 	.db #0x66	; 102	'f'
      000C0D 6D                    1424 	.db #0x6d	; 109	'm'
      000C0E 7D                    1425 	.db #0x7d	; 125
      000C0F 07                    1426 	.db #0x07	; 7
      000C10 7F                    1427 	.db #0x7f	; 127
      000C11 67                    1428 	.db #0x67	; 103	'g'
      000C12 77                    1429 	.db #0x77	; 119	'w'
      000C13 7C                    1430 	.db #0x7c	; 124
      000C14 58                    1431 	.db #0x58	; 88	'X'
      000C15 5E                    1432 	.db #0x5e	; 94
      000C16 79                    1433 	.db #0x79	; 121	'y'
      000C17 71                    1434 	.db #0x71	; 113	'q'
      000C18 80                    1435 	.db #0x80	; 128
      000C19 00                    1436 	.db #0x00	; 0
                                   1437 	.area XINIT   (CODE)
                                   1438 	.area CABS    (ABS,CODE)
